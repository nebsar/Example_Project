// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: glyphs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_glyphs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_glyphs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_glyphs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_glyphs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace mapboxgl {
namespace glyphs {
class fontstack;
struct fontstackDefaultTypeInternal;
extern fontstackDefaultTypeInternal _fontstack_default_instance_;
class glyph;
struct glyphDefaultTypeInternal;
extern glyphDefaultTypeInternal _glyph_default_instance_;
class glyphs;
struct glyphsDefaultTypeInternal;
extern glyphsDefaultTypeInternal _glyphs_default_instance_;
}  // namespace glyphs
}  // namespace mapboxgl
PROTOBUF_NAMESPACE_OPEN
template<> ::mapboxgl::glyphs::fontstack* Arena::CreateMaybeMessage<::mapboxgl::glyphs::fontstack>(Arena*);
template<> ::mapboxgl::glyphs::glyph* Arena::CreateMaybeMessage<::mapboxgl::glyphs::glyph>(Arena*);
template<> ::mapboxgl::glyphs::glyphs* Arena::CreateMaybeMessage<::mapboxgl::glyphs::glyphs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mapboxgl {
namespace glyphs {

// ===================================================================

class glyph final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mapboxgl.glyphs.glyph) */ {
 public:
  inline glyph() : glyph(nullptr) {}
  ~glyph() override;
  explicit constexpr glyph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  glyph(const glyph& from);
  glyph(glyph&& from) noexcept
    : glyph() {
    *this = ::std::move(from);
  }

  inline glyph& operator=(const glyph& from) {
    CopyFrom(from);
    return *this;
  }
  inline glyph& operator=(glyph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const glyph& default_instance() {
    return *internal_default_instance();
  }
  static inline const glyph* internal_default_instance() {
    return reinterpret_cast<const glyph*>(
               &_glyph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(glyph& a, glyph& b) {
    a.Swap(&b);
  }
  inline void Swap(glyph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(glyph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  glyph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<glyph>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const glyph& from);
  void MergeFrom(const glyph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(glyph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapboxgl.glyphs.glyph";
  }
  protected:
  explicit glyph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitmapFieldNumber = 2,
    kIdFieldNumber = 1,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kLeftFieldNumber = 5,
    kTopFieldNumber = 6,
    kAdvanceFieldNumber = 7,
  };
  // optional bytes bitmap = 2;
  bool has_bitmap() const;
  private:
  bool _internal_has_bitmap() const;
  public:
  void clear_bitmap();
  const std::string& bitmap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bitmap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bitmap();
  PROTOBUF_NODISCARD std::string* release_bitmap();
  void set_allocated_bitmap(std::string* bitmap);
  private:
  const std::string& _internal_bitmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bitmap(const std::string& value);
  std::string* _internal_mutable_bitmap();
  public:

  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // required uint32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // required uint32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // required sint32 left = 5;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // required sint32 top = 6;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  int32_t top() const;
  void set_top(int32_t value);
  private:
  int32_t _internal_top() const;
  void _internal_set_top(int32_t value);
  public:

  // required uint32 advance = 7;
  bool has_advance() const;
  private:
  bool _internal_has_advance() const;
  public:
  void clear_advance();
  uint32_t advance() const;
  void set_advance(uint32_t value);
  private:
  uint32_t _internal_advance() const;
  void _internal_set_advance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:mapboxgl.glyphs.glyph)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bitmap_;
  uint32_t id_;
  uint32_t width_;
  uint32_t height_;
  int32_t left_;
  int32_t top_;
  uint32_t advance_;
  friend struct ::TableStruct_glyphs_2eproto;
};
// -------------------------------------------------------------------

class fontstack final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mapboxgl.glyphs.fontstack) */ {
 public:
  inline fontstack() : fontstack(nullptr) {}
  ~fontstack() override;
  explicit constexpr fontstack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  fontstack(const fontstack& from);
  fontstack(fontstack&& from) noexcept
    : fontstack() {
    *this = ::std::move(from);
  }

  inline fontstack& operator=(const fontstack& from) {
    CopyFrom(from);
    return *this;
  }
  inline fontstack& operator=(fontstack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const fontstack& default_instance() {
    return *internal_default_instance();
  }
  static inline const fontstack* internal_default_instance() {
    return reinterpret_cast<const fontstack*>(
               &_fontstack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(fontstack& a, fontstack& b) {
    a.Swap(&b);
  }
  inline void Swap(fontstack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fontstack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  fontstack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<fontstack>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const fontstack& from);
  void MergeFrom(const fontstack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(fontstack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapboxgl.glyphs.fontstack";
  }
  protected:
  explicit fontstack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlyphsFieldNumber = 3,
    kNameFieldNumber = 1,
    kRangeFieldNumber = 2,
  };
  // repeated .mapboxgl.glyphs.glyph glyphs = 3;
  int glyphs_size() const;
  private:
  int _internal_glyphs_size() const;
  public:
  void clear_glyphs();
  ::mapboxgl::glyphs::glyph* mutable_glyphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::glyph >*
      mutable_glyphs();
  private:
  const ::mapboxgl::glyphs::glyph& _internal_glyphs(int index) const;
  ::mapboxgl::glyphs::glyph* _internal_add_glyphs();
  public:
  const ::mapboxgl::glyphs::glyph& glyphs(int index) const;
  ::mapboxgl::glyphs::glyph* add_glyphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::glyph >&
      glyphs() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string range = 2;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const std::string& range() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_range(ArgT0&& arg0, ArgT... args);
  std::string* mutable_range();
  PROTOBUF_NODISCARD std::string* release_range();
  void set_allocated_range(std::string* range);
  private:
  const std::string& _internal_range() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_range(const std::string& value);
  std::string* _internal_mutable_range();
  public:

  // @@protoc_insertion_point(class_scope:mapboxgl.glyphs.fontstack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::glyph > glyphs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_;
  friend struct ::TableStruct_glyphs_2eproto;
};
// -------------------------------------------------------------------

class glyphs final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mapboxgl.glyphs.glyphs) */ {
 public:
  inline glyphs() : glyphs(nullptr) {}
  ~glyphs() override;
  explicit constexpr glyphs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  glyphs(const glyphs& from);
  glyphs(glyphs&& from) noexcept
    : glyphs() {
    *this = ::std::move(from);
  }

  inline glyphs& operator=(const glyphs& from) {
    CopyFrom(from);
    return *this;
  }
  inline glyphs& operator=(glyphs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const glyphs& default_instance() {
    return *internal_default_instance();
  }
  static inline const glyphs* internal_default_instance() {
    return reinterpret_cast<const glyphs*>(
               &_glyphs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(glyphs& a, glyphs& b) {
    a.Swap(&b);
  }
  inline void Swap(glyphs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(glyphs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  glyphs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<glyphs>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const glyphs& from);
  void MergeFrom(const glyphs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(glyphs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapboxgl.glyphs.glyphs";
  }
  protected:
  explicit glyphs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStacksFieldNumber = 1,
  };
  // repeated .mapboxgl.glyphs.fontstack stacks = 1;
  int stacks_size() const;
  private:
  int _internal_stacks_size() const;
  public:
  void clear_stacks();
  ::mapboxgl::glyphs::fontstack* mutable_stacks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::fontstack >*
      mutable_stacks();
  private:
  const ::mapboxgl::glyphs::fontstack& _internal_stacks(int index) const;
  ::mapboxgl::glyphs::fontstack* _internal_add_stacks();
  public:
  const ::mapboxgl::glyphs::fontstack& stacks(int index) const;
  ::mapboxgl::glyphs::fontstack* add_stacks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::fontstack >&
      stacks() const;


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          glyphs, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:mapboxgl.glyphs.glyphs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::fontstack > stacks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glyphs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// glyph

// required uint32 id = 1;
inline bool glyph::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool glyph::has_id() const {
  return _internal_has_id();
}
inline void glyph::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t glyph::_internal_id() const {
  return id_;
}
inline uint32_t glyph::id() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyph.id)
  return _internal_id();
}
inline void glyph::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void glyph::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.glyph.id)
}

// optional bytes bitmap = 2;
inline bool glyph::_internal_has_bitmap() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool glyph::has_bitmap() const {
  return _internal_has_bitmap();
}
inline void glyph::clear_bitmap() {
  bitmap_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& glyph::bitmap() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyph.bitmap)
  return _internal_bitmap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void glyph::set_bitmap(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 bitmap_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.glyph.bitmap)
}
inline std::string* glyph::mutable_bitmap() {
  std::string* _s = _internal_mutable_bitmap();
  // @@protoc_insertion_point(field_mutable:mapboxgl.glyphs.glyph.bitmap)
  return _s;
}
inline const std::string& glyph::_internal_bitmap() const {
  return bitmap_.Get();
}
inline void glyph::_internal_set_bitmap(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bitmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* glyph::_internal_mutable_bitmap() {
  _has_bits_[0] |= 0x00000001u;
  return bitmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* glyph::release_bitmap() {
  // @@protoc_insertion_point(field_release:mapboxgl.glyphs.glyph.bitmap)
  if (!_internal_has_bitmap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = bitmap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bitmap_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bitmap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void glyph::set_allocated_bitmap(std::string* bitmap) {
  if (bitmap != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bitmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bitmap,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bitmap_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bitmap_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mapboxgl.glyphs.glyph.bitmap)
}

// required uint32 width = 3;
inline bool glyph::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool glyph::has_width() const {
  return _internal_has_width();
}
inline void glyph::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t glyph::_internal_width() const {
  return width_;
}
inline uint32_t glyph::width() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyph.width)
  return _internal_width();
}
inline void glyph::_internal_set_width(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void glyph::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.glyph.width)
}

// required uint32 height = 4;
inline bool glyph::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool glyph::has_height() const {
  return _internal_has_height();
}
inline void glyph::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t glyph::_internal_height() const {
  return height_;
}
inline uint32_t glyph::height() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyph.height)
  return _internal_height();
}
inline void glyph::_internal_set_height(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void glyph::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.glyph.height)
}

// required sint32 left = 5;
inline bool glyph::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool glyph::has_left() const {
  return _internal_has_left();
}
inline void glyph::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t glyph::_internal_left() const {
  return left_;
}
inline int32_t glyph::left() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyph.left)
  return _internal_left();
}
inline void glyph::_internal_set_left(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  left_ = value;
}
inline void glyph::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.glyph.left)
}

// required sint32 top = 6;
inline bool glyph::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool glyph::has_top() const {
  return _internal_has_top();
}
inline void glyph::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t glyph::_internal_top() const {
  return top_;
}
inline int32_t glyph::top() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyph.top)
  return _internal_top();
}
inline void glyph::_internal_set_top(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  top_ = value;
}
inline void glyph::set_top(int32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.glyph.top)
}

// required uint32 advance = 7;
inline bool glyph::_internal_has_advance() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool glyph::has_advance() const {
  return _internal_has_advance();
}
inline void glyph::clear_advance() {
  advance_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t glyph::_internal_advance() const {
  return advance_;
}
inline uint32_t glyph::advance() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyph.advance)
  return _internal_advance();
}
inline void glyph::_internal_set_advance(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  advance_ = value;
}
inline void glyph::set_advance(uint32_t value) {
  _internal_set_advance(value);
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.glyph.advance)
}

// -------------------------------------------------------------------

// fontstack

// required string name = 1;
inline bool fontstack::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool fontstack::has_name() const {
  return _internal_has_name();
}
inline void fontstack::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& fontstack::name() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.fontstack.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void fontstack::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.fontstack.name)
}
inline std::string* fontstack::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mapboxgl.glyphs.fontstack.name)
  return _s;
}
inline const std::string& fontstack::_internal_name() const {
  return name_.Get();
}
inline void fontstack::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* fontstack::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* fontstack::release_name() {
  // @@protoc_insertion_point(field_release:mapboxgl.glyphs.fontstack.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void fontstack::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mapboxgl.glyphs.fontstack.name)
}

// required string range = 2;
inline bool fontstack::_internal_has_range() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool fontstack::has_range() const {
  return _internal_has_range();
}
inline void fontstack::clear_range() {
  range_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& fontstack::range() const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.fontstack.range)
  return _internal_range();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void fontstack::set_range(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mapboxgl.glyphs.fontstack.range)
}
inline std::string* fontstack::mutable_range() {
  std::string* _s = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:mapboxgl.glyphs.fontstack.range)
  return _s;
}
inline const std::string& fontstack::_internal_range() const {
  return range_.Get();
}
inline void fontstack::_internal_set_range(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  range_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* fontstack::_internal_mutable_range() {
  _has_bits_[0] |= 0x00000002u;
  return range_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* fontstack::release_range() {
  // @@protoc_insertion_point(field_release:mapboxgl.glyphs.fontstack.range)
  if (!_internal_has_range()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = range_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (range_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    range_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void fontstack::set_allocated_range(std::string* range) {
  if (range != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  range_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (range_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    range_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mapboxgl.glyphs.fontstack.range)
}

// repeated .mapboxgl.glyphs.glyph glyphs = 3;
inline int fontstack::_internal_glyphs_size() const {
  return glyphs_.size();
}
inline int fontstack::glyphs_size() const {
  return _internal_glyphs_size();
}
inline void fontstack::clear_glyphs() {
  glyphs_.Clear();
}
inline ::mapboxgl::glyphs::glyph* fontstack::mutable_glyphs(int index) {
  // @@protoc_insertion_point(field_mutable:mapboxgl.glyphs.fontstack.glyphs)
  return glyphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::glyph >*
fontstack::mutable_glyphs() {
  // @@protoc_insertion_point(field_mutable_list:mapboxgl.glyphs.fontstack.glyphs)
  return &glyphs_;
}
inline const ::mapboxgl::glyphs::glyph& fontstack::_internal_glyphs(int index) const {
  return glyphs_.Get(index);
}
inline const ::mapboxgl::glyphs::glyph& fontstack::glyphs(int index) const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.fontstack.glyphs)
  return _internal_glyphs(index);
}
inline ::mapboxgl::glyphs::glyph* fontstack::_internal_add_glyphs() {
  return glyphs_.Add();
}
inline ::mapboxgl::glyphs::glyph* fontstack::add_glyphs() {
  ::mapboxgl::glyphs::glyph* _add = _internal_add_glyphs();
  // @@protoc_insertion_point(field_add:mapboxgl.glyphs.fontstack.glyphs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::glyph >&
fontstack::glyphs() const {
  // @@protoc_insertion_point(field_list:mapboxgl.glyphs.fontstack.glyphs)
  return glyphs_;
}

// -------------------------------------------------------------------

// glyphs

// repeated .mapboxgl.glyphs.fontstack stacks = 1;
inline int glyphs::_internal_stacks_size() const {
  return stacks_.size();
}
inline int glyphs::stacks_size() const {
  return _internal_stacks_size();
}
inline void glyphs::clear_stacks() {
  stacks_.Clear();
}
inline ::mapboxgl::glyphs::fontstack* glyphs::mutable_stacks(int index) {
  // @@protoc_insertion_point(field_mutable:mapboxgl.glyphs.glyphs.stacks)
  return stacks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::fontstack >*
glyphs::mutable_stacks() {
  // @@protoc_insertion_point(field_mutable_list:mapboxgl.glyphs.glyphs.stacks)
  return &stacks_;
}
inline const ::mapboxgl::glyphs::fontstack& glyphs::_internal_stacks(int index) const {
  return stacks_.Get(index);
}
inline const ::mapboxgl::glyphs::fontstack& glyphs::stacks(int index) const {
  // @@protoc_insertion_point(field_get:mapboxgl.glyphs.glyphs.stacks)
  return _internal_stacks(index);
}
inline ::mapboxgl::glyphs::fontstack* glyphs::_internal_add_stacks() {
  return stacks_.Add();
}
inline ::mapboxgl::glyphs::fontstack* glyphs::add_stacks() {
  ::mapboxgl::glyphs::fontstack* _add = _internal_add_stacks();
  // @@protoc_insertion_point(field_add:mapboxgl.glyphs.glyphs.stacks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapboxgl::glyphs::fontstack >&
glyphs::stacks() const {
  // @@protoc_insertion_point(field_list:mapboxgl.glyphs.glyphs.stacks)
  return stacks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace glyphs
}  // namespace mapboxgl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_glyphs_2eproto
