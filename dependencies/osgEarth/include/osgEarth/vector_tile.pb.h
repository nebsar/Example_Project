// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_tile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vector_5ftile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vector_5ftile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vector_5ftile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vector_5ftile_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace mapnik {
namespace vector {
class tile;
struct tileDefaultTypeInternal;
extern tileDefaultTypeInternal _tile_default_instance_;
class tile_feature;
struct tile_featureDefaultTypeInternal;
extern tile_featureDefaultTypeInternal _tile_feature_default_instance_;
class tile_layer;
struct tile_layerDefaultTypeInternal;
extern tile_layerDefaultTypeInternal _tile_layer_default_instance_;
class tile_value;
struct tile_valueDefaultTypeInternal;
extern tile_valueDefaultTypeInternal _tile_value_default_instance_;
}  // namespace vector
}  // namespace mapnik
PROTOBUF_NAMESPACE_OPEN
template<> ::mapnik::vector::tile* Arena::CreateMaybeMessage<::mapnik::vector::tile>(Arena*);
template<> ::mapnik::vector::tile_feature* Arena::CreateMaybeMessage<::mapnik::vector::tile_feature>(Arena*);
template<> ::mapnik::vector::tile_layer* Arena::CreateMaybeMessage<::mapnik::vector::tile_layer>(Arena*);
template<> ::mapnik::vector::tile_value* Arena::CreateMaybeMessage<::mapnik::vector::tile_value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mapnik {
namespace vector {

enum tile_GeomType : int {
  tile_GeomType_Unknown = 0,
  tile_GeomType_Point = 1,
  tile_GeomType_LineString = 2,
  tile_GeomType_Polygon = 3
};
bool tile_GeomType_IsValid(int value);
constexpr tile_GeomType tile_GeomType_GeomType_MIN = tile_GeomType_Unknown;
constexpr tile_GeomType tile_GeomType_GeomType_MAX = tile_GeomType_Polygon;
constexpr int tile_GeomType_GeomType_ARRAYSIZE = tile_GeomType_GeomType_MAX + 1;

const std::string& tile_GeomType_Name(tile_GeomType value);
template<typename T>
inline const std::string& tile_GeomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, tile_GeomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function tile_GeomType_Name.");
  return tile_GeomType_Name(static_cast<tile_GeomType>(enum_t_value));
}
bool tile_GeomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, tile_GeomType* value);
// ===================================================================

class tile_value final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile.value) */ {
 public:
  inline tile_value() : tile_value(nullptr) {}
  ~tile_value() override;
  explicit constexpr tile_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tile_value(const tile_value& from);
  tile_value(tile_value&& from) noexcept
    : tile_value() {
    *this = ::std::move(from);
  }

  inline tile_value& operator=(const tile_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline tile_value& operator=(tile_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const tile_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const tile_value* internal_default_instance() {
    return reinterpret_cast<const tile_value*>(
               &_tile_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(tile_value& a, tile_value& b) {
    a.Swap(&b);
  }
  inline void Swap(tile_value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tile_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tile_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tile_value>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const tile_value& from);
  void MergeFrom(const tile_value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile_value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapnik.vector.tile.value";
  }
  protected:
  explicit tile_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kDoubleValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kFloatValueFieldNumber = 2,
    kBoolValueFieldNumber = 7,
    kUintValueFieldNumber = 5,
    kSintValueFieldNumber = 6,
  };
  // optional string string_value = 1;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional int64 int_value = 4;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int64_t int_value() const;
  void set_int_value(int64_t value);
  private:
  int64_t _internal_int_value() const;
  void _internal_set_int_value(int64_t value);
  public:

  // optional float float_value = 2;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // optional bool bool_value = 7;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional uint64 uint_value = 5;
  bool has_uint_value() const;
  private:
  bool _internal_has_uint_value() const;
  public:
  void clear_uint_value();
  uint64_t uint_value() const;
  void set_uint_value(uint64_t value);
  private:
  uint64_t _internal_uint_value() const;
  void _internal_set_uint_value(uint64_t value);
  public:

  // optional sint64 sint_value = 6;
  bool has_sint_value() const;
  private:
  bool _internal_has_sint_value() const;
  public:
  void clear_sint_value();
  int64_t sint_value() const;
  void set_sint_value(int64_t value);
  private:
  int64_t _internal_sint_value() const;
  void _internal_set_sint_value(int64_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_value, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:mapnik.vector.tile.value)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  double double_value_;
  int64_t int_value_;
  float float_value_;
  bool bool_value_;
  uint64_t uint_value_;
  int64_t sint_value_;
  friend struct ::TableStruct_vector_5ftile_2eproto;
};
// -------------------------------------------------------------------

class tile_feature final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile.feature) */ {
 public:
  inline tile_feature() : tile_feature(nullptr) {}
  ~tile_feature() override;
  explicit constexpr tile_feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tile_feature(const tile_feature& from);
  tile_feature(tile_feature&& from) noexcept
    : tile_feature() {
    *this = ::std::move(from);
  }

  inline tile_feature& operator=(const tile_feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline tile_feature& operator=(tile_feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const tile_feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const tile_feature* internal_default_instance() {
    return reinterpret_cast<const tile_feature*>(
               &_tile_feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(tile_feature& a, tile_feature& b) {
    a.Swap(&b);
  }
  inline void Swap(tile_feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tile_feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tile_feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tile_feature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const tile_feature& from);
  void MergeFrom(const tile_feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile_feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapnik.vector.tile.feature";
  }
  protected:
  explicit tile_feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kGeometryFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated uint32 tags = 2 [packed = true];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  uint32_t _internal_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tags() const;
  void _internal_add_tags(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tags();
  public:
  uint32_t tags(int index) const;
  void set_tags(int index, uint32_t value);
  void add_tags(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tags();

  // repeated uint32 geometry = 4 [packed = true];
  int geometry_size() const;
  private:
  int _internal_geometry_size() const;
  public:
  void clear_geometry();
  private:
  uint32_t _internal_geometry(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_geometry() const;
  void _internal_add_geometry(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_geometry();
  public:
  uint32_t geometry(int index) const;
  void set_geometry(int index, uint32_t value);
  void add_geometry(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      geometry() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_geometry();

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mapnik::vector::tile_GeomType type() const;
  void set_type(::mapnik::vector::tile_GeomType value);
  private:
  ::mapnik::vector::tile_GeomType _internal_type() const;
  void _internal_set_type(::mapnik::vector::tile_GeomType value);
  public:

  // @@protoc_insertion_point(class_scope:mapnik.vector.tile.feature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tags_;
  mutable std::atomic<int> _tags_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > geometry_;
  mutable std::atomic<int> _geometry_cached_byte_size_;
  uint64_t id_;
  int type_;
  friend struct ::TableStruct_vector_5ftile_2eproto;
};
// -------------------------------------------------------------------

class tile_layer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile.layer) */ {
 public:
  inline tile_layer() : tile_layer(nullptr) {}
  ~tile_layer() override;
  explicit constexpr tile_layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tile_layer(const tile_layer& from);
  tile_layer(tile_layer&& from) noexcept
    : tile_layer() {
    *this = ::std::move(from);
  }

  inline tile_layer& operator=(const tile_layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline tile_layer& operator=(tile_layer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const tile_layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const tile_layer* internal_default_instance() {
    return reinterpret_cast<const tile_layer*>(
               &_tile_layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(tile_layer& a, tile_layer& b) {
    a.Swap(&b);
  }
  inline void Swap(tile_layer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tile_layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tile_layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tile_layer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const tile_layer& from);
  void MergeFrom(const tile_layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile_layer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapnik.vector.tile.layer";
  }
  protected:
  explicit tile_layer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kKeysFieldNumber = 3,
    kValuesFieldNumber = 4,
    kNameFieldNumber = 1,
    kExtentFieldNumber = 5,
    kVersionFieldNumber = 15,
  };
  // repeated .mapnik.vector.tile.feature features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  ::mapnik::vector::tile_feature* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_feature >*
      mutable_features();
  private:
  const ::mapnik::vector::tile_feature& _internal_features(int index) const;
  ::mapnik::vector::tile_feature* _internal_add_features();
  public:
  const ::mapnik::vector::tile_feature& features(int index) const;
  ::mapnik::vector::tile_feature* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_feature >&
      features() const;

  // repeated string keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // repeated .mapnik.vector.tile.value values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::mapnik::vector::tile_value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_value >*
      mutable_values();
  private:
  const ::mapnik::vector::tile_value& _internal_values(int index) const;
  ::mapnik::vector::tile_value* _internal_add_values();
  public:
  const ::mapnik::vector::tile_value& values(int index) const;
  ::mapnik::vector::tile_value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_value >&
      values() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 extent = 5 [default = 4096];
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  uint32_t extent() const;
  void set_extent(uint32_t value);
  private:
  uint32_t _internal_extent() const;
  void _internal_set_extent(uint32_t value);
  public:

  // required uint32 version = 15 [default = 1];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile_layer, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:mapnik.vector.tile.layer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_feature > features_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_value > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint32_t extent_;
  uint32_t version_;
  friend struct ::TableStruct_vector_5ftile_2eproto;
};
// -------------------------------------------------------------------

class tile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mapnik.vector.tile) */ {
 public:
  inline tile() : tile(nullptr) {}
  ~tile() override;
  explicit constexpr tile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tile(const tile& from);
  tile(tile&& from) noexcept
    : tile() {
    *this = ::std::move(from);
  }

  inline tile& operator=(const tile& from) {
    CopyFrom(from);
    return *this;
  }
  inline tile& operator=(tile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const tile& default_instance() {
    return *internal_default_instance();
  }
  static inline const tile* internal_default_instance() {
    return reinterpret_cast<const tile*>(
               &_tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(tile& a, tile& b) {
    a.Swap(&b);
  }
  inline void Swap(tile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<tile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const tile& from);
  void MergeFrom(const tile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapnik.vector.tile";
  }
  protected:
  explicit tile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef tile_value value;
  typedef tile_feature feature;
  typedef tile_layer layer;

  typedef tile_GeomType GeomType;
  static constexpr GeomType Unknown =
    tile_GeomType_Unknown;
  static constexpr GeomType Point =
    tile_GeomType_Point;
  static constexpr GeomType LineString =
    tile_GeomType_LineString;
  static constexpr GeomType Polygon =
    tile_GeomType_Polygon;
  static inline bool GeomType_IsValid(int value) {
    return tile_GeomType_IsValid(value);
  }
  static constexpr GeomType GeomType_MIN =
    tile_GeomType_GeomType_MIN;
  static constexpr GeomType GeomType_MAX =
    tile_GeomType_GeomType_MAX;
  static constexpr int GeomType_ARRAYSIZE =
    tile_GeomType_GeomType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GeomType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GeomType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GeomType_Name.");
    return tile_GeomType_Name(enum_t_value);
  }
  static inline bool GeomType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GeomType* value) {
    return tile_GeomType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 3,
  };
  // repeated .mapnik.vector.tile.layer layers = 3;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::mapnik::vector::tile_layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_layer >*
      mutable_layers();
  private:
  const ::mapnik::vector::tile_layer& _internal_layers(int index) const;
  ::mapnik::vector::tile_layer* _internal_add_layers();
  public:
  const ::mapnik::vector::tile_layer& layers(int index) const;
  ::mapnik::vector::tile_layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_layer >&
      layers() const;


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              tile, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          tile, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_extensions_);
  }

  // @@protoc_insertion_point(class_scope:mapnik.vector.tile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_layer > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_5ftile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tile_value

// optional string string_value = 1;
inline bool tile_value::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tile_value::has_string_value() const {
  return _internal_has_string_value();
}
inline void tile_value::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& tile_value::string_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void tile_value::set_string_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.string_value)
}
inline std::string* tile_value::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.value.string_value)
  return _s;
}
inline const std::string& tile_value::_internal_string_value() const {
  return string_value_.Get();
}
inline void tile_value::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* tile_value::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* tile_value::release_string_value() {
  // @@protoc_insertion_point(field_release:mapnik.vector.tile.value.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void tile_value::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mapnik.vector.tile.value.string_value)
}

// optional float float_value = 2;
inline bool tile_value::_internal_has_float_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool tile_value::has_float_value() const {
  return _internal_has_float_value();
}
inline void tile_value::clear_float_value() {
  float_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float tile_value::_internal_float_value() const {
  return float_value_;
}
inline float tile_value::float_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.float_value)
  return _internal_float_value();
}
inline void tile_value::_internal_set_float_value(float value) {
  _has_bits_[0] |= 0x00000008u;
  float_value_ = value;
}
inline void tile_value::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.float_value)
}

// optional double double_value = 3;
inline bool tile_value::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool tile_value::has_double_value() const {
  return _internal_has_double_value();
}
inline void tile_value::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double tile_value::_internal_double_value() const {
  return double_value_;
}
inline double tile_value::double_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.double_value)
  return _internal_double_value();
}
inline void tile_value::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000002u;
  double_value_ = value;
}
inline void tile_value::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.double_value)
}

// optional int64 int_value = 4;
inline bool tile_value::_internal_has_int_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool tile_value::has_int_value() const {
  return _internal_has_int_value();
}
inline void tile_value::clear_int_value() {
  int_value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t tile_value::_internal_int_value() const {
  return int_value_;
}
inline int64_t tile_value::int_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.int_value)
  return _internal_int_value();
}
inline void tile_value::_internal_set_int_value(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  int_value_ = value;
}
inline void tile_value::set_int_value(int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.int_value)
}

// optional uint64 uint_value = 5;
inline bool tile_value::_internal_has_uint_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool tile_value::has_uint_value() const {
  return _internal_has_uint_value();
}
inline void tile_value::clear_uint_value() {
  uint_value_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t tile_value::_internal_uint_value() const {
  return uint_value_;
}
inline uint64_t tile_value::uint_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.uint_value)
  return _internal_uint_value();
}
inline void tile_value::_internal_set_uint_value(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  uint_value_ = value;
}
inline void tile_value::set_uint_value(uint64_t value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.uint_value)
}

// optional sint64 sint_value = 6;
inline bool tile_value::_internal_has_sint_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool tile_value::has_sint_value() const {
  return _internal_has_sint_value();
}
inline void tile_value::clear_sint_value() {
  sint_value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t tile_value::_internal_sint_value() const {
  return sint_value_;
}
inline int64_t tile_value::sint_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.sint_value)
  return _internal_sint_value();
}
inline void tile_value::_internal_set_sint_value(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  sint_value_ = value;
}
inline void tile_value::set_sint_value(int64_t value) {
  _internal_set_sint_value(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.sint_value)
}

// optional bool bool_value = 7;
inline bool tile_value::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool tile_value::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void tile_value::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool tile_value::_internal_bool_value() const {
  return bool_value_;
}
inline bool tile_value::bool_value() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.value.bool_value)
  return _internal_bool_value();
}
inline void tile_value::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bool_value_ = value;
}
inline void tile_value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.value.bool_value)
}

// -------------------------------------------------------------------

// tile_feature

// optional uint64 id = 1;
inline bool tile_feature::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tile_feature::has_id() const {
  return _internal_has_id();
}
inline void tile_feature::clear_id() {
  id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t tile_feature::_internal_id() const {
  return id_;
}
inline uint64_t tile_feature::id() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.id)
  return _internal_id();
}
inline void tile_feature::_internal_set_id(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void tile_feature::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.id)
}

// repeated uint32 tags = 2 [packed = true];
inline int tile_feature::_internal_tags_size() const {
  return tags_.size();
}
inline int tile_feature::tags_size() const {
  return _internal_tags_size();
}
inline void tile_feature::clear_tags() {
  tags_.Clear();
}
inline uint32_t tile_feature::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline uint32_t tile_feature::tags(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.tags)
  return _internal_tags(index);
}
inline void tile_feature::set_tags(int index, uint32_t value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.tags)
}
inline void tile_feature::_internal_add_tags(uint32_t value) {
  tags_.Add(value);
}
inline void tile_feature::add_tags(uint32_t value) {
  _internal_add_tags(value);
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.feature.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
tile_feature::_internal_tags() const {
  return tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
tile_feature::tags() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.feature.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
tile_feature::_internal_mutable_tags() {
  return &tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
tile_feature::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.feature.tags)
  return _internal_mutable_tags();
}

// optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
inline bool tile_feature::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool tile_feature::has_type() const {
  return _internal_has_type();
}
inline void tile_feature::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mapnik::vector::tile_GeomType tile_feature::_internal_type() const {
  return static_cast< ::mapnik::vector::tile_GeomType >(type_);
}
inline ::mapnik::vector::tile_GeomType tile_feature::type() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.type)
  return _internal_type();
}
inline void tile_feature::_internal_set_type(::mapnik::vector::tile_GeomType value) {
  assert(::mapnik::vector::tile_GeomType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void tile_feature::set_type(::mapnik::vector::tile_GeomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.type)
}

// repeated uint32 geometry = 4 [packed = true];
inline int tile_feature::_internal_geometry_size() const {
  return geometry_.size();
}
inline int tile_feature::geometry_size() const {
  return _internal_geometry_size();
}
inline void tile_feature::clear_geometry() {
  geometry_.Clear();
}
inline uint32_t tile_feature::_internal_geometry(int index) const {
  return geometry_.Get(index);
}
inline uint32_t tile_feature::geometry(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.feature.geometry)
  return _internal_geometry(index);
}
inline void tile_feature::set_geometry(int index, uint32_t value) {
  geometry_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.feature.geometry)
}
inline void tile_feature::_internal_add_geometry(uint32_t value) {
  geometry_.Add(value);
}
inline void tile_feature::add_geometry(uint32_t value) {
  _internal_add_geometry(value);
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.feature.geometry)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
tile_feature::_internal_geometry() const {
  return geometry_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
tile_feature::geometry() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.feature.geometry)
  return _internal_geometry();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
tile_feature::_internal_mutable_geometry() {
  return &geometry_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
tile_feature::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.feature.geometry)
  return _internal_mutable_geometry();
}

// -------------------------------------------------------------------

// tile_layer

// required uint32 version = 15 [default = 1];
inline bool tile_layer::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool tile_layer::has_version() const {
  return _internal_has_version();
}
inline void tile_layer::clear_version() {
  version_ = 1u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t tile_layer::_internal_version() const {
  return version_;
}
inline uint32_t tile_layer::version() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.version)
  return _internal_version();
}
inline void tile_layer::_internal_set_version(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void tile_layer::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.version)
}

// required string name = 1;
inline bool tile_layer::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tile_layer::has_name() const {
  return _internal_has_name();
}
inline void tile_layer::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& tile_layer::name() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void tile_layer::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.name)
}
inline std::string* tile_layer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.name)
  return _s;
}
inline const std::string& tile_layer::_internal_name() const {
  return name_.Get();
}
inline void tile_layer::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* tile_layer::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* tile_layer::release_name() {
  // @@protoc_insertion_point(field_release:mapnik.vector.tile.layer.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void tile_layer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mapnik.vector.tile.layer.name)
}

// repeated .mapnik.vector.tile.feature features = 2;
inline int tile_layer::_internal_features_size() const {
  return features_.size();
}
inline int tile_layer::features_size() const {
  return _internal_features_size();
}
inline void tile_layer::clear_features() {
  features_.Clear();
}
inline ::mapnik::vector::tile_feature* tile_layer::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_feature >*
tile_layer::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layer.features)
  return &features_;
}
inline const ::mapnik::vector::tile_feature& tile_layer::_internal_features(int index) const {
  return features_.Get(index);
}
inline const ::mapnik::vector::tile_feature& tile_layer::features(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.features)
  return _internal_features(index);
}
inline ::mapnik::vector::tile_feature* tile_layer::_internal_add_features() {
  return features_.Add();
}
inline ::mapnik::vector::tile_feature* tile_layer::add_features() {
  ::mapnik::vector::tile_feature* _add = _internal_add_features();
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.features)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_feature >&
tile_layer::features() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layer.features)
  return features_;
}

// repeated string keys = 3;
inline int tile_layer::_internal_keys_size() const {
  return keys_.size();
}
inline int tile_layer::keys_size() const {
  return _internal_keys_size();
}
inline void tile_layer::clear_keys() {
  keys_.Clear();
}
inline std::string* tile_layer::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:mapnik.vector.tile.layer.keys)
  return _s;
}
inline const std::string& tile_layer::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& tile_layer::keys(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.keys)
  return _internal_keys(index);
}
inline std::string* tile_layer::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.keys)
  return keys_.Mutable(index);
}
inline void tile_layer::set_keys(int index, const std::string& value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::set_keys(int index, std::string&& value) {
  keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapnik.vector.tile.layer.keys)
}
inline std::string* tile_layer::_internal_add_keys() {
  return keys_.Add();
}
inline void tile_layer::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapnik.vector.tile.layer.keys)
}
inline void tile_layer::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapnik.vector.tile.layer.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
tile_layer::keys() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layer.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
tile_layer::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layer.keys)
  return &keys_;
}

// repeated .mapnik.vector.tile.value values = 4;
inline int tile_layer::_internal_values_size() const {
  return values_.size();
}
inline int tile_layer::values_size() const {
  return _internal_values_size();
}
inline void tile_layer::clear_values() {
  values_.Clear();
}
inline ::mapnik::vector::tile_value* tile_layer::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layer.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_value >*
tile_layer::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layer.values)
  return &values_;
}
inline const ::mapnik::vector::tile_value& tile_layer::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::mapnik::vector::tile_value& tile_layer::values(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.values)
  return _internal_values(index);
}
inline ::mapnik::vector::tile_value* tile_layer::_internal_add_values() {
  return values_.Add();
}
inline ::mapnik::vector::tile_value* tile_layer::add_values() {
  ::mapnik::vector::tile_value* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layer.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_value >&
tile_layer::values() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layer.values)
  return values_;
}

// optional uint32 extent = 5 [default = 4096];
inline bool tile_layer::_internal_has_extent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool tile_layer::has_extent() const {
  return _internal_has_extent();
}
inline void tile_layer::clear_extent() {
  extent_ = 4096u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t tile_layer::_internal_extent() const {
  return extent_;
}
inline uint32_t tile_layer::extent() const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layer.extent)
  return _internal_extent();
}
inline void tile_layer::_internal_set_extent(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  extent_ = value;
}
inline void tile_layer::set_extent(uint32_t value) {
  _internal_set_extent(value);
  // @@protoc_insertion_point(field_set:mapnik.vector.tile.layer.extent)
}

// -------------------------------------------------------------------

// tile

// repeated .mapnik.vector.tile.layer layers = 3;
inline int tile::_internal_layers_size() const {
  return layers_.size();
}
inline int tile::layers_size() const {
  return _internal_layers_size();
}
inline void tile::clear_layers() {
  layers_.Clear();
}
inline ::mapnik::vector::tile_layer* tile::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:mapnik.vector.tile.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_layer >*
tile::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:mapnik.vector.tile.layers)
  return &layers_;
}
inline const ::mapnik::vector::tile_layer& tile::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::mapnik::vector::tile_layer& tile::layers(int index) const {
  // @@protoc_insertion_point(field_get:mapnik.vector.tile.layers)
  return _internal_layers(index);
}
inline ::mapnik::vector::tile_layer* tile::_internal_add_layers() {
  return layers_.Add();
}
inline ::mapnik::vector::tile_layer* tile::add_layers() {
  ::mapnik::vector::tile_layer* _add = _internal_add_layers();
  // @@protoc_insertion_point(field_add:mapnik.vector.tile.layers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapnik::vector::tile_layer >&
tile::layers() const {
  // @@protoc_insertion_point(field_list:mapnik.vector.tile.layers)
  return layers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vector
}  // namespace mapnik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mapnik::vector::tile_GeomType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vector_5ftile_2eproto
